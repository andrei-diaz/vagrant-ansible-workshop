---
# Monitoring Stack - Grafana + Prometheus
# Taller Vagrant + Ansible

- name: "üìä MONITORING: Configuraci√≥n Grafana + Prometheus"
  hosts: monitoring
  become: yes
  vars:
    grafana_version: "latest"
    prometheus_version: "latest"
    
  tasks:
    # ===================================
    # INSTALACI√ìN DE PROMETHEUS
    # ===================================
    - name: Crear usuario prometheus
      user:
        name: prometheus
        system: yes
        shell: /bin/false
        home: /var/lib/prometheus
        create_home: no

    - name: Crear directorios de Prometheus
      file:
        path: "{{ item }}"
        state: directory
        owner: prometheus
        group: prometheus
        mode: '0755'
      loop:
        - /etc/prometheus
        - /var/lib/prometheus
        - /var/lib/prometheus/data

    - name: Descargar e instalar Prometheus
      unarchive:
        src: "https://github.com/prometheus/prometheus/releases/latest/download/prometheus-2.47.0.linux-arm64.tar.gz"
        dest: /opt
        remote_src: yes
        creates: /opt/prometheus-2.47.0.linux-arm64
        owner: prometheus
        group: prometheus

    - name: Crear enlaces simb√≥licos para Prometheus
      file:
        src: /opt/prometheus-2.47.0.linux-arm64/{{ item }}
        dest: /usr/local/bin/{{ item }}
        state: link
        force: yes
      loop:
        - prometheus
        - promtool

    - name: Configurar Prometheus
      copy:
        dest: /etc/prometheus/prometheus.yml
        owner: prometheus
        group: prometheus
        content: |
          global:
            scrape_interval: 15s
            evaluation_interval: 15s

          rule_files:
            # - "first_rules.yml"
            # - "second_rules.yml"

          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']

            - job_name: 'node-exporter'
              static_configs:
                - targets: 
                  - '192.168.56.10:9100'  # Load Balancer
                  - '192.168.56.20:9100'  # Web Server
                  - '192.168.56.30:9100'  # Database
                  - '192.168.56.40:9100'  # Monitoring

            - job_name: 'nginx-exporter'
              static_configs:
                - targets:
                  - '192.168.56.10:9113'  # Load Balancer Nginx
                  - '192.168.56.20:9113'  # Web Server Nginx

            - job_name: 'postgres-exporter'
              static_configs:
                - targets: ['192.168.56.30:9187']

      notify: restart prometheus

    - name: Crear servicio systemd para Prometheus
      copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/prometheus \
              --config.file /etc/prometheus/prometheus.yml \
              --storage.tsdb.path /var/lib/prometheus/data \
              --web.console.templates=/etc/prometheus/consoles \
              --web.console.libraries=/etc/prometheus/console_libraries \
              --web.listen-address=0.0.0.0:9090 \
              --web.enable-lifecycle

          [Install]
          WantedBy=multi-user.target
      notify: 
        - reload systemd
        - restart prometheus

    # ===================================
    # INSTALACI√ìN DE GRAFANA
    # ===================================
    - name: Agregar clave GPG de Grafana
      apt_key:
        url: https://apt.grafana.com/gpg.key
        state: present

    - name: Agregar repositorio de Grafana
      apt_repository:
        repo: "deb https://apt.grafana.com stable main"
        state: present
        update_cache: yes

    - name: Instalar Grafana
      apt:
        name: grafana
        state: present

    - name: Configurar Grafana
      lineinfile:
        path: /etc/grafana/grafana.ini
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - regexp: '^;?domain'
          line: 'domain = examenes.local'
        - regexp: '^;?root_url'
          line: 'root_url = http://192.168.56.40:3000'
        - regexp: '^;?serve_from_sub_path'
          line: 'serve_from_sub_path = false'
      notify: restart grafana

    # ===================================
    # CONFIGURACI√ìN DE NODE EXPORTER
    # ===================================
    - name: Descargar e instalar Node Exporter
      unarchive:
        src: "https://github.com/prometheus/node_exporter/releases/latest/download/node_exporter-1.6.1.linux-arm64.tar.gz"
        dest: /opt
        remote_src: yes
        creates: /opt/node_exporter-1.6.1.linux-arm64
        owner: prometheus
        group: prometheus

    - name: Crear enlace simb√≥lico para Node Exporter
      file:
        src: /opt/node_exporter-1.6.1.linux-arm64/node_exporter
        dest: /usr/local/bin/node_exporter
        state: link
        force: yes

    - name: Crear servicio systemd para Node Exporter
      copy:
        dest: /etc/systemd/system/node_exporter.service
        content: |
          [Unit]
          Description=Node Exporter
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/node_exporter

          [Install]
          WantedBy=multi-user.target
      notify:
        - reload systemd
        - restart node_exporter

    # ===================================
    # CONFIGURACI√ìN INICIAL DE GRAFANA
    # ===================================
    - name: Crear dashboard b√°sico para Grafana
      copy:
        dest: /var/lib/grafana/dashboards/examenes-dashboard.json
        owner: grafana
        group: grafana
        content: |
          {
            "dashboard": {
              "id": null,
              "title": "Sistema de Ex√°menes - Monitoreo",
              "tags": ["examenes", "sistema"],
              "timezone": "America/Mexico_City",
              "panels": [
                {
                  "title": "CPU Usage",
                  "type": "graph",
                  "targets": [
                    {
                      "expr": "100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)"
                    }
                  ]
                },
                {
                  "title": "Memory Usage",
                  "type": "graph", 
                  "targets": [
                    {
                      "expr": "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100"
                    }
                  ]
                }
              ]
            }
          }

    # ===================================
    # SCRIPTS DE MONITOREO
    # ===================================
    - name: Crear script de verificaci√≥n del stack de monitoreo
      copy:
        dest: /usr/local/bin/check_monitoring_stack
        mode: '0755'
        content: |
          #!/bin/bash
          # Script de verificaci√≥n del stack de monitoreo
          
          echo "=== Verificaci√≥n Stack de Monitoreo ==="
          echo "Fecha: $(date)"
          echo
          
          # Verificar servicios
          echo "üìã Estado de servicios:"
          systemctl is-active prometheus && echo "‚úÖ Prometheus: OK" || echo "‚ùå Prometheus: ERROR"
          systemctl is-active grafana-server && echo "‚úÖ Grafana: OK" || echo "‚ùå Grafana: ERROR"
          systemctl is-active node_exporter && echo "‚úÖ Node Exporter: OK" || echo "‚ùå Node Exporter: ERROR"
          echo
          
          # Verificar puertos
          echo "üåê Verificaci√≥n de puertos:"
          nc -zv localhost 9090 2>&1 | grep -q "succeeded" && echo "‚úÖ Prometheus (9090): OK" || echo "‚ùå Prometheus (9090): ERROR"
          nc -zv localhost 3000 2>&1 | grep -q "succeeded" && echo "‚úÖ Grafana (3000): OK" || echo "‚ùå Grafana (3000): ERROR"
          nc -zv localhost 9100 2>&1 | grep -q "succeeded" && echo "‚úÖ Node Exporter (9100): OK" || echo "‚ùå Node Exporter (9100): ERROR"
          echo
          
          # Verificar conectividad con otros nodos
          echo "üîó Conectividad con otros nodos:"
          for ip in 192.168.56.10 192.168.56.20 192.168.56.30; do
            nc -zv $ip 22 2>&1 | grep -q "succeeded" && echo "‚úÖ $ip: OK" || echo "‚ùå $ip: ERROR"
          done
          echo
          
          # Verificar m√©tricas b√°sicas
          echo "üìä Verificaci√≥n de m√©tricas:"
          curl -s http://localhost:9090/api/v1/query?query=up | grep -q '"status":"success"' && echo "‚úÖ Prometheus API: OK" || echo "‚ùå Prometheus API: ERROR"
          curl -s http://localhost:3000/api/health | grep -q "ok" && echo "‚úÖ Grafana API: OK" || echo "‚ùå Grafana API: ERROR"
          echo
          echo "=== Fin de verificaci√≥n ==="

    # ===================================
    # INICIALIZACI√ìN DE SERVICIOS
    # ===================================
    - name: Habilitar e iniciar servicios
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
        daemon_reload: yes
      loop:
        - prometheus
        - grafana-server
        - node_exporter

    - name: Esperar a que Grafana est√© listo
      wait_for:
        port: 3000
        delay: 10
        timeout: 120

    - name: Mostrar informaci√≥n del monitoreo
      debug:
        msg: |
          ==========================================
          üìä MONITORING STACK CONFIGURADO
          ==========================================
          üî• Prometheus: http://192.168.56.40:9090
          üìà Grafana: http://192.168.56.40:3000
          üìä Node Exporter: http://192.168.56.40:9100
          
          Acceso desde tu Mac:
          ‚Ä¢ Prometheus: http://localhost:9090
          ‚Ä¢ Grafana: http://localhost:3000
          
          Credenciales Grafana:
          ‚Ä¢ Usuario: admin
          ‚Ä¢ Password: admin
          
          üîç Verificaci√≥n: /usr/local/bin/check_monitoring_stack
          ==========================================
          Targets configurados:
          ‚Ä¢ Load Balancer: 192.168.56.10
          ‚Ä¢ Web Server: 192.168.56.20  
          ‚Ä¢ Database: 192.168.56.30
          ‚Ä¢ Monitoring: 192.168.56.40
          ==========================================

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart prometheus
      systemd:
        name: prometheus
        state: restarted

    - name: restart grafana
      systemd:
        name: grafana-server
        state: restarted

    - name: restart node_exporter
      systemd:
        name: node_exporter
        state: restarted